import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../database/database_helper.dart';
import '../database/model.dart';
import 'search.dart';
import '../database/add_task.dart';
import '../database/edit_task.dart'; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ EditTaskScreen

class TaskScreen extends StatefulWidget {
  TaskScreen({Key? key, required this.dbHelper}) : super(key: key);
  final DatabaseHelper dbHelper;

  @override
  _TaskScreenState createState() => _TaskScreenState();
}

class _TaskScreenState extends State<TaskScreen> {
  List<Task2> tasks = []; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å products ‡πÄ‡∏õ‡πá‡∏ô tasks

  Future<dynamic> _showConfirmDialog(BuildContext context, String confirmMessages) async =>
      showDialog(
        context: context,
        barrierDismissible: true,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text(confirmMessages, style: const TextStyle(color: Colors.pinkAccent)),
            actions: [
              ElevatedButton(
                onPressed: () {
                  Navigator.pop(context, true);
                },
                child: const Text('‡πÉ‡∏ä‡πà', style: TextStyle(color: Colors.white)),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.lightBlueAccent),
              ),
              ElevatedButton(
                onPressed: () {
                  Navigator.pop(context, false);
                },
                child: const Text('‡πÑ‡∏°‡πà', style: TextStyle(color: Colors.white)),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.redAccent),
              ),
            ],
          );
        },
      );

  void _deleteTask(String referenceId) {
    widget.dbHelper.deleteTaskById(referenceId); // ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Firestore
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        actions: [
          IconButton(
            onPressed: () async {
              await Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => AddTaskPage(dbHelper: widget.dbHelper),
                ),
              );
            },
            icon: const Icon(Icons.add_task),
          ),
          IconButton(
            onPressed: () {
              Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (context) => SearchProduct(dbHelper: widget.dbHelper),
                ),
              );
            },
            icon: const Icon(Icons.search),
          ),
        ],
        title: const Text('‚ú® Tasks ‚ú®'),
        backgroundColor: const Color.fromARGB(255, 255, 255, 255),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.pinkAccent.withOpacity(0.5), // ‡∏™‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
              Colors.lightBlueAccent.withOpacity(0.5), // ‡∏™‡∏µ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
            ],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: StreamBuilder<QuerySnapshot>(
          stream: widget.dbHelper.getStream(),
          builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
            if (!snapshot.hasData) {
              return const Center(child: CircularProgressIndicator());
            }
            tasks.clear();
            for (var element in snapshot.data!.docs) {
              tasks.add(Task2.fromMap(element.data() as Map<String, dynamic>, element.id));
            }

            // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á tasks ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            tasks.sort((a, b) => a.dueDate.compareTo(b.dueDate));

            return ListView.builder(
              itemCount: tasks.length,
              itemBuilder: (context, index) {
                return Dismissible(
                  key: UniqueKey(),
                  background: Container(color: Colors.blue),
                  secondaryBackground: Container(
                    color: const Color.fromARGB(255, 67, 39, 255),
                    alignment: Alignment.centerRight,
                    padding: const EdgeInsets.only(right: 20),
                    child: const Icon(Icons.delete_rounded, color: Colors.white, size: 30),
                  ),
                  onDismissed: (direction) {
                    if (direction == DismissDirection.endToStart) {
                      _showConfirmDialog(context, '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ?').then((confirmed) {
                        if (confirmed) {
                          _deleteTask(tasks[index].referenceId!); // ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                        }
                      });
                    }
                  },
                  confirmDismiss: (direction) async {
                    if (direction == DismissDirection.endToStart) {
                      return await _showConfirmDialog(context, '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ?');
                    }
                    return false;
                  },
                  child: Card(
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(15.0),
                    ),
                    elevation: 5,
                    margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                    color: Colors.lightBlue[50],
                    child: ListTile(
                      leading: Icon(
                        tasks[index].isCompleted ? Icons.check_circle : Icons.circle,
                        color: tasks[index].isCompleted ? Colors.green : Colors.grey,
                        size: 30,
                      ),
                      title: Text(
                        tasks[index].title,
                        style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 18, color: Colors.deepPurple),
                      ),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text('üìÖ ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${tasks[index].dueDate.toLocal()}'),
                          Text('üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤: ${tasks[index].progress}%'),
                          Text(
                            tasks[index].isCompleted ? '‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à',
                            style: const TextStyle(color: Colors.pink, fontWeight: FontWeight.bold),
                          ),
                        ],
                      ),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min, // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                        children: [
                          IconButton(
                            icon: Icon(Icons.edit, color: Colors.blue),
                            onPressed: () async {
                              await Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => EditTaskScreen(
                                    task: tasks[index],
                                    onUpdate: (updatedTask) {
                                      widget.dbHelper.updateTask(updatedTask);
                                      setState(() {
                                        tasks[index] = updatedTask;
                                      });
                                    },
                                    onDelete: (referenceId) {
                                      _deleteTask(referenceId);
                                      setState(() {
                                        tasks.removeAt(index); // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
                                      });
                                    },
                                  ),
                                ),
                              );
                            },
                          ),
                        ],
                      ),
                      onTap: () {
                        // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏ó‡∏µ‡πà ListTile ‡πÑ‡∏î‡πâ
                      },
                    ),
                  ),
                );
              },
            );
          },
        ),
      ),
    );
  }
}
